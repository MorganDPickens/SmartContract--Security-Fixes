// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GasGriefingExample {
    // This contract demonstrates the concept of gas griefing and how to mitigate it.

    // Mapping to store balances of users
    mapping(address => uint256) public balances;

    // Event to log deposits
    event Deposit(address indexed user, uint256 amount);

    // Event to log withdrawals
    event Withdraw(address indexed user, uint256 amount);

    // Function to deposit Ether into the contract
    function deposit() external payable {
        // Update the balance of the sender
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw Ether from the contract
    // This function is vulnerable to gas griefing
    function withdraw(uint256 amount) external {
        // Check if the user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] -= amount;

        // Transfer the amount to the sender
        // This line can be manipulated by gas griefing
        // If the receiver is a contract and its fallback function uses all the gas,
        // it can cause this transaction to fail.
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    // Function to fix gas griefing
    // By splitting the balance update and the Ether transfer into separate functions,
    // we can avoid the problem.
    function safeWithdraw(uint256 amount) external {
        // Check if the user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] -= amount;

        // Emit the withdraw event
        emit Withdraw(msg.sender, amount);

        // Transfer the amount to the sender in a separate function call
        _transfer(msg.sender, amount);
    }

    // Internal function to transfer Ether
    // This function ensures that the Ether transfer is handled separately
    function _transfer(address recipient, uint256 amount) internal {
        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Transfer failed");
    }
    
    // Fallback function to accept Ether
    receive() external payable {}
}
//1.	Gas Griefing:
	//•	Gas griefing occurs when a malicious contract or account intentionally consumes all the gas in a transaction, causing it to fail. This can happen when the receiving contract has a fallback function that uses a lot of gas.
//	•	In the withdraw function, transferring Ether directly to msg.sender can be manipulated by gas griefing.
//	2.	Fix:
//	•	The fix involves splitting the balance update and the Ether transfer into separate steps.
//	•	The safeWithdraw function updates the user’s balance first and emits an event.
//	•	The _transfer function is called separately to handle the Ether transfer, ensuring that the balance update is not affected by gas griefing.

//This approach ensures that even if the Ether transfer fails due to gas griefing, the user’s balance has already been updated, and they can attempt the transfer again without loss of funds.
