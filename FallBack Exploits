// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FallbackExploits {
    // This contract demonstrates how to mitigate fallback function exploits.

    // Mapping to store balances of users
    mapping(address => uint256) public balances;

    // Event to log deposits
    event Deposit(address indexed user, uint256 amount);

    // Event to log withdrawals
    event Withdraw(address indexed user, uint256 amount);

    // Function to deposit Ether into the contract
    function deposit() external payable {
        // Update the balance of the sender
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw Ether from the contract
    function withdraw(uint256 amount) external {
        // Check if the user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] -= amount;

        // Transfer the amount to the sender
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    // Function to withdraw all Ether from the contract
    // This is a potential vulnerability if not properly secured
    function withdrawAll() external {
        uint256 balance = balances[msg.sender];
        require(balance > 0, "No funds to withdraw");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] = 0;

        // Transfer the balance to the sender
        (bool success, ) = msg.sender.call{value: balance}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, balance);
    }

    // Fallback function to accept Ether
    receive() external payable {
        // This fallback function can be exploited if it contains logic to update balances
        // Example of a vulnerable fallback function:
        // balances[msg.sender] += msg.value;
        // This would allow an attacker to forcefully update their balance

        // Mitigation: Do not include any logic that updates state variables in the fallback function
        // Keep the fallback function simple and minimal
    }
}

// Contract to demonstrate an attack using fallback function exploit
contract FallbackExploit {
    // Address of the vulnerable contract
    FallbackExploits public vulnerableContract;

    // Constructor to set the address of the vulnerable contract
    constructor(address _vulnerableContract) {
        vulnerableContract = FallbackExploits(_vulnerableContract);
    }

    // Function to exploit the fallback function
    function exploit() external payable {
        // Send Ether to the vulnerable contract to trigger its fallback function
        address(vulnerableContract).call{value: msg.value}("");
    }

    // Function to withdraw funds from the vulnerable contract
    function withdraw() external {
        vulnerableContract.withdrawAll();
    }

    // Fallback function to accept Ether
    receive() external payable {}
}
//Explanation:

  //  Fallback Function Exploits:
     //   A fallback function in Solidity is a function that is executed when a contract receives Ether without any data, or when the data does not match any function signature.
     //   If the fallback function contains logic to update state variables (like balances), it can be exploited to force the contract into an unintended state or to steal funds.

  //  Vulnerability:
     //   In the FallbackExploits contract, if the fallback function were to update the balances, an attacker could repeatedly send Ether to the contract to manipulate their balance.

  //  Mitigation:
      //  Ensure the fallback function does not contain any logic that updates state variables. It should only be used to accept Ether.
       // The receive function in FallbackExploits is kept simple and minimal to avoid any unintended state changes.

  //  Steps:
      //  The deposit and withdraw functions allow users to deposit and withdraw Ether from the contract.
       // The withdrawAll function allows users to withdraw all their Ether, but it's secured by updating the balance before making the transfer.
       // The receive function is a simple fallback function that accepts Ether without making any state changes.
