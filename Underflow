// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UnderflowExample {
    // This contract demonstrates the concept of underflow and how to mitigate it.

    // Mapping to store balances of users
    mapping(address => uint256) public balances;

    // Event to log deposits
    event Deposit(address indexed user, uint256 amount);

    // Event to log withdrawals
    event Withdraw(address indexed user, uint256 amount);

    // Function to deposit Ether into the contract
    function deposit() external payable {
        // Update the balance of the sender
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw Ether from the contract
    // This function is vulnerable to underflow
    function withdraw(uint256 amount) external {
        // Check if the user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] -= amount;

        // Transfer the amount to the sender
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    // Function to fix underflow using Solidity 0.8.0 built-in checks
    // Solidity 0.8.0 and later versions automatically check for underflow
    function safeWithdraw(uint256 amount) external {
        // Check if the user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the balance using Solidity's built-in underflow checks
        balances[msg.sender] -= amount;

        // Transfer the amount to the sender
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    // Fallback function to accept Ether
    receive() external payable {}
}

1.	Underflow:
//	•	An underflow occurs when an arithmetic operation results in a value lower than the minimum limit of a data type, causing it to wrap around to a very high number. This can lead to unexpected behavior and vulnerabilities.
//	•	In earlier versions of Solidity, arithmetic operations did not automatically check for underflow.&
//	2.	Fix:
//	•	Solidity 0.8.0 and later versions have built-in underflow checks, which means arithmetic operations revert on underflow by default.
//	•	In this example, the safeWithdraw function relies on these built-in underflow checks to ensure safety.



