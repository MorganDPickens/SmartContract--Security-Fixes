// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DefaultVisibility {
    // This contract demonstrates the risk of not specifying visibility explicitly.

    // State variable without explicit visibility (defaults to internal)
    uint256 balance;

    // Function to deposit Ether into the contract
    // No visibility specified (defaults to public)
    function deposit() payable {
        balance += msg.value;
    }

    // Function to withdraw Ether from the contract
    // No visibility specified (defaults to public)
    function withdraw(uint256 amount) {
        require(balance >= amount, "Insufficient balance");
        balance -= amount;
        payable(msg.sender).transfer(amount);
    }

    // Fallback function to accept Ether
    receive() external payable {}
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExplicitVisibility {
    // This contract demonstrates how to specify visibility explicitly to avoid potential issues.

    // State variable with explicit visibility
    uint256 private balance;

    // Owner of the contract with explicit visibility
    address public owner;

    // Constructor to set the owner of the contract
    constructor() {
        owner = msg.sender;
    }

    // Modifier to restrict access to the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    // Function to deposit Ether into the contract with explicit visibility
    function deposit() external payable {
        balance += msg.value;
    }

    // Function to withdraw Ether from the contract with explicit visibility
    function withdraw(uint256 amount) external onlyOwner {
        require(balance >= amount, "Insufficient balance");
        balance -= amount;
        payable(msg.sender).transfer(amount);
    }

    // Function to get the contract balance with explicit visibility
    function getBalance() external view returns (uint256) {
        return balance;
    }

    // Function to change the owner of the contract with explicit visibility
    function changeOwner(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid address");
        owner = newOwner;
    }

    // Fallback function to accept Ether
    receive() external payable {}
}

// Explanation:
// Default Visibility:

// In Solidity, if visibility is not specified, functions default to public and state variables default to internal. This can lead to unintended access to functions and state variables.
// Vulnerability:

// In the DefaultVisibility contract, the functions deposit and withdraw default to public visibility, and the balance state variable defaults to internal. This may lead to unintended access if the intended visibility was different.
// Mitigation:

// Always explicitly specify the visibility for functions and state variables to ensure the intended access control.
// Steps:

// The ExplicitVisibility contract explicitly specifies the visibility for all functions and state variables.
// The balance state variable is marked as private to restrict direct access.
// The owner state variable is marked as public to allow external visibility.
// Functions deposit and withdraw are marked as external to indicate they are intended to be called from outside the contract.
// The withdraw function uses the onlyOwner modifier to restrict access to the contract owner.
// The getBalance function is added with external view visibility to allow external read access to the contract balance.
// The changeOwner function is marked as external and uses the onlyOwner modifier to allow the owner to transfer ownership.
// By explicitly specifying visibility for all functions and state variables, the contract mitigates the risk of unintended access and ensures that access control is clearly defined.
