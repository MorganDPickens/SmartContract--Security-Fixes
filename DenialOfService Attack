// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DoSMitigation {
    // This contract demonstrates how to mitigate Denial of Service (DoS) attacks.

    // Mapping to store balances of users
    mapping(address => uint256) public balances;

    // List of users
    address[] public users;

    // Event to log deposits
    event Deposit(address indexed user, uint256 amount);

    // Event to log withdrawals
    event Withdraw(address indexed user, uint256 amount);

    // Function to deposit Ether into the contract
    function deposit() external payable {
        // Update the balance of the sender
        balances[msg.sender] += msg.value;

        // Add user to the list if not already added
        if (balances[msg.sender] == msg.value) {
            users.push(msg.sender);
        }

        emit Deposit(msg.sender, msg.value);
    }

    // Function to withdraw Ether from the contract
    // This function is vulnerable to DoS attacks
    function withdraw(uint256 amount) external {
        // Check if the user has enough balance
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] -= amount;

        // Transfer the amount to the sender
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    // Function to distribute funds to users
    // This function is vulnerable to DoS attacks
    function distributeFunds() external {
        uint256 totalUsers = users.length;
        uint256 amountPerUser = address(this).balance / totalUsers;

        for (uint256 i = 0; i < totalUsers; i++) {
            address user = users[i];
            if (balances[user] > 0) {
                // This external call can be exploited by DoS
                (bool success, ) = user.call{value: amountPerUser}("");
                require(success, "Transfer failed");
            }
        }
    }

    // Function to safely distribute funds to users
    // This function mitigates DoS attacks by using a pull over push model
    function safeDistributeFunds() external {
        uint256 totalUsers = users.length;
        uint256 amountPerUser = address(this).balance / totalUsers;

        for (uint256 i = 0; i < totalUsers; i++) {
            address user = users[i];
            if (balances[user] > 0) {
                // Update user balance first to mitigate DoS
                balances[user] += amountPerUser;
            }
        }
    }

    // Function for users to withdraw their distributed funds
    function withdrawDistributedFunds() external {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "No funds to withdraw");

        // Update the balance before transferring to prevent reentrancy attacks
        balances[msg.sender] = 0;

        // Transfer the amount to the sender
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdraw(msg.sender, amount);
    }

    // Fallback function to accept Ether
    receive() external payable {}
}
//Explanation:

//	1.	Denial of Service (DoS) Attacks:
	//•	A DoS attack occurs when a malicious user intentionally disrupts the normal functioning of a smart contract. In this example, the distributeFunds function is vulnerable to DoS attacks because it relies on external calls that could fail.
//	2.	DoS Vulnerability:
//	•	In the distributeFunds function, a failure in the external call to user.call could cause the entire function to revert, preventing funds from being distributed to other users.
//	3.	Mitigation:
//	•	The safeDistributeFunds function avoids direct Ether transfers within the loop. Instead, it updates the balances of users, allowing them to withdraw their funds later.
//	•	The withdrawDistributedFunds function allows users to withdraw their distributed funds, ensuring that the contract cannot be blocked by a single failing transaction.
//	4.	Steps:
//	•	The deposit function allows users to deposit Ether into the contract and adds them to the list of users if they are new.
	//•	The safeDistributeFunds function updates the balances of all users based on the total balance of the contract.
//	•	The withdrawDistributedFunds function allows users to withdraw their distributed funds, ensuring that the contract is not vulnerable to DoS attacks.

